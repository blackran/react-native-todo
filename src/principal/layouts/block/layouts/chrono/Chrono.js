import React, { useState, useEffect, useCallback, useRef } from 'react'
import { Text, View, Image, TouchableOpacity } from 'react-native'
import { betweenTwoDate } from '../../../DatePicker/DatePicker'
import Dialog from 'react-native-dialog'

import { useSelector, useDispatch } from 'react-redux'

import PushNotification from 'react-native-push-notification'

import watchdog from '../../../../statics/images/watch-dog-2-marcus-holloway.jpg'

function Chrono (props) {
  const tasks = useSelector(state => state.Tasks)
  const [visible, setVisible] = useState(false)
  const [state, setStateTrue] = useState({
    date: null,
    start: false,
    style: {}
  })

  const { dataAlert } = useSelector(state => state.Alert)
  const [dureeAlert, setDureeAlert] = useState(0)
  const [one, setOne] = useState(false)

  const [showStop, setShowStop] = useState(false)

  const stopSong = useRef()

  const [nextTask, setNextTask] = useState('')

  const setState = useCallback((data) => {
    setStateTrue(Object.assign({}, state, data))
    }, []) // eslint-disable-line

  const pushNotification = (mes) => {
    PushNotification.localNotification({
      id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: 'Ny asanao manaraka', // (optional)
      message: mes // (required)
    })
  }

  useEffect(() => {
    if (dataAlert) {
      const { dureeAlert } = dataAlert
      setDureeAlert(dureeAlert)
    }
  }, [dataAlert])
  // chrono ==================================================================

  const dispatch = useDispatch()
  const dispatchOne = useCallback(() => {
    setTimeout(() => {
      props.runSong()
      dispatch({
        type: 'DATA_FILTER',
        active: props.active
      })
      setShowStop(true)
      dispatch({ type: 'DATA_ACTIVE' })
      // setVisible(false)
      props.setUpdateAt()
    }, 2000)
    pushNotification(nextTask)
  }, [dispatch, nextTask, props.active , props.runSong ]) //eslint-disable-line

  useEffect(() => {
    if (visible && state.date > 1 && state.date < 2000) {
      dispatchOne()
    }
  }, [dispatchOne, props.runSong, state.date, visible])

  useEffect(() => {
    if (state.date > 1 && state.date < dureeAlert * 60 * 1000 && !one) {
      setShowStop(false)
      setOne(true)
      stopSong.current = props.runSong()
      setTimeout(() => {
        console.log(stopSong.current)
        if (stopSong.current.cancel) {
          stopSong.current.cancel()
        } else {
          stopSong.current.stop()
        }
      }, 10000)
      setVisible(true)
    }
  }, [state.date]) // eslint-disable-line

  // chrono ==================================================================
  useEffect(() => {
    const { debut, fin } = props
    const stock = betweenTwoDate(debut, fin)

    const t = tasks.dataTask.find(e => {
      const finId = fin[2]
      return e.idTasks === finId
    }).titleTasks
    setNextTask(t)
    setState({ date: stock, style: props.style })
  }, [props, setState, tasks.dataTask])

  const setDouble = (e) => {
    if (e < 10) {
      return '0' + e
    } else {
      return e
    }
  }

  const secondToDate = (e) => {
    let response = '00:00:00'
    if (e > 0) {
      const oneHeure = (60 * 60 * 1000)
      const oneMinute = (60 * 1000)
      const oneSecond = 1000

      const heure = Math.floor(e / oneHeure)
      const resteHeure = (e - (heure * oneHeure)) >= 0 ? (e - (heure * oneHeure)) : 0
      const minute = Math.floor(resteHeure / oneMinute)
      const resteMinute = (minute * oneMinute)
      const second = Math.abs(Math.floor((e - (e - resteMinute) - (resteHeure)) / oneSecond))
      response = (setDouble(heure) + ':' + setDouble(minute) + ':' + setDouble(second))
    }

    return response
  }

  return (
    <View>
      <Text
        style={{
          fontSize: 24,
          textDecorationLine: props.finish ? 'line-through' : 'none',
          color: props.start
            ? props.color.activeColor.fontColor.light
            : (props.finish ? props.color.activeColor.fontColor.dark : props.color.activeColor.fontColor.dark + '99')
        }}
      >
        {!props.finish ? secondToDate(state.date) : ''}
      </Text>
      {visible &&
        <Dialog.Container style={{ width: 300, height: 300 }} visible={visible}>
          <Dialog.Title
            style={{
              textAlign: 'center',
              color: (state.date > 1 && state.date < 1 * 60 * 1000) ? 'red' : 'transparent',
              zIndex: 100
            }}
          >FIALANA SASATRA KELY
          </Dialog.Title>
          <Image
            source={watchdog}
            style={{
              width: 300,
              height: 300,
              position: 'absolute'
            }}
          />
          <View
            style={{
              // width: '100%',
              alignItems: 'flex-end',
              justifyContent: 'space-between',
              paddingTop: 40,
              flexDirection: 'row'
            }}
          >
            <View>
              {showStop &&
                <TouchableOpacity
                  onPress={() => {
                    stopSong.current.cancel ? stopSong.current.cancel() : stopSong.current.stop()
                    setVisible(false)
                  }}
                  style={{
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 1000,
                    marginLeft: 10,
                    borderWidth: 1,
                    borderColor: (state.date > 1 && state.date < 1 * 60 * 1000) ? 'red' : 'white',
                    borderRadius: 10,
                    padding: 5
                  }}
                >
                  <Text
                    style={{
                      ...props.style,
                      fontSize: 18,
                      color: (state.date > 1 && state.date < 1 * 60 * 1000) ? 'red' : 'white'
                    }}
                  >Akatona
                  </Text>
                </TouchableOpacity>}
            </View>
            <View
              style={{
                borderWidth: 3,
                borderColor: (state.date > 1 && state.date < 1 * 60 * 1000) ? 'red' : 'black',
                width: 100,
                height: 100,
                borderRadius: 100,
                justifyContent: 'center',
                alignItems: 'center',
                backgroundColor: '#00000099'
              }}
            >
              <Text
                style={{
                  ...props.style,
                  fontSize: 20,
                  color: (state.date > 1 && state.date < 1 * 60 * 1000) ? 'red' : 'white'
                }}
              >
                {secondToDate(state.date)}
              </Text>
            </View>
          </View>
        </Dialog.Container>}
    </View>
  )
}

export default Chrono
