import React, { Component } from 'react'
import {
    ScrollView,
    View,
    TextInput,
    TouchableHighlight,
    Animated,
    Dimensions,
    TouchableWithoutFeedback,
    Text,
    PanResponder,
    StyleSheet,
    FlatList
} from 'react-native'
import styles from './statics/styles/Style'
import { connect } from 'react-redux'
// import { Icon } from 'react-native-elements'
import axios from 'axios'
import Block from './layouts/block/Block'
// import { DrawerActions } from 'react-navigation-drawer'
// import { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome'
// import { faAlignJustify } from '@fortawesome/free-solid-svg-icons'
import Move from '../animation/Move'
import { CHANGE_IS_AUTH } from '../../actions/OtherActions'

const { width } = Dimensions.get('window')

class Principals extends Component {
    constructor (props) {
        super(props)
        this.state = {
            data: [],
            searchValue: '',
            trans: new Animated.ValueXY({ x: 0, y: 0 }),
            active: new Date().getDay(),
            translate: new Animated.Value(0),
            page: 0
        }
    }

    UNSAFE_componentWillMount () {
        this.getFilterAnnonce('')
        this.panResponder = PanResponder.create({
            onStartShouldSetPanResponder: (evt, gestureState) => false,
            onStartShouldSetPanResponderCapture: (evt, gestureState) => false,
            onMoveShouldSetPanResponder: (evt, gestureState) => gestureState.dy > 2,
            onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,
            onPanResponderTerminationRequest: () => false,
            // quand le animation bouge
            onPanResponderMove: Animated.event([null, { dy: this.state.translate }]).bind(this),
            onPanResponderRelease: this.endGesture.bind(this),
            onPanResponderTerminate: (evt, gestureState) => {
                console.log('teminer')
            },
            onShouldBlockNativeResponder: (evt, gestureState) => true
        })
    }

    endGesture (evt, gestureState) {
        console.log('je lace')
        var toValue = 0
        // if (Math.abs(gestureState.dy) / 60 >= 1) {
        if (gestureState.dy > 0) {
            toValue = 60
        } else {
            toValue = -60
        }
        // }

        Animated.timing(
            this.state.translate,
            {
                duration: 300,
                toValue: toValue,
                useNativeDriver: true
            }
        ).start(() => {
            this.state.translate.setValue(0)
            toValue < 0 ? this.nextPage() : this.prevPage()
        })
    }

    nextPage () {
        this.setState({ page: this.state.page >= 5 ? 0 : this.state.page + 1 })
    }

    prevPage () {
        this.setState({ page: this.state.page <= 1 ? 6 : this.state.page - 1 })
    }

    getFilterAnnonce (value) {
        axios.get(this.props.other.ip_add + 'Annonce/recherche/' + value,
            {
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Methods': 'POST,GET,HEAD,OPTIONS,PUT,DELETE'
                }
            }
        ).then(h => {
            this.setState({ data: h.data })
        }).catch(err => console.log('error parsing:\n', err))
    }

    OnChangeSearch (value) {
        this.getFilterAnnonce(value)
        this.setState({ searchValue: value })
    }

    OnClickDetails (id, h) {
        console.log(h)
        this.props.navigation.push('Details', { id: id })
    }

    OnScroll (e) {
        // console.log('===========================================================\n')
        // console.log(e.nativeEvent.velocity.y > 0)
        // console.log(Math.round(e.nativeEvent.contentOffset.y+60 / 60))
        // console.log('===========================================================\n')
        if (this.state.value !== Math.round(e.nativeEvent.contentOffset.y / 60)) {
            this.setState({ active: Math.round(e.nativeEvent.contentOffset.y / 60) })
        }
    }

    render () {
        // console.log(this.state.client)
        const jours = [
            'Alahady',
            'Alatsinainy',
            'Talata',
            'Alarobia',
            'Alakamisy',
            'Zoma',
            'Sabotsy'
        ]
        return (
            <View
                style={{
                    flex: 1,
                    alignItems: 'center',
                    justifyContent: 'center',
                    backgroundColor: '#222222'
                }}>
                <View
                    style={{
                        width: '100%',
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                        borderWidth: 1,
                        borderColor: 'white',
                        padding: 10
                    }}>
                    {/* <ScrollView */}
                    {/* style={styles.myscroll} */}
                    {/* showsVerticalScrollIndicator={false} */}
                    {/* onScroll={ this.OnScroll.bind(this) } */}
                    {/* > */}
                    <View style={styles.myscroll}>
                        <Animated.View
                            {...this.panResponder.panHandlers}
                            style={{
                                height: 60 * (jours.length + 2),
                                top: this.state.page * -1 * 60,
                                transform: [{ translateY: this.state.translate }]
                            }}>
                            <View
                                style={{
                                    height: 60,
                                    borderWidth: 1,
                                    borderColor: 'red',
                                    justifyContent: 'center',
                                    alignItems: 'center'
                                }}>
                                <Text
                                    style={{
                                        color: 'white',
                                        fontSize: 12
                                    }}> {jours[jours.length - 1]} </Text>
                            </View>

                            {
                                jours.map((e, index) => {
                                    return (
                                        <View
                                            key={index}
                                            style={{
                                                height: 60,
                                                borderWidth: 1,
                                                borderColor: 'red',
                                                justifyContent: 'center',
                                                alignItems: 'center'
                                            }}>
                                            <Text
                                                style={{
                                                    color: 'white',
                                                    fontSize: this.state.active === index ? (width / 10) : 12
                                                }}> {e} </Text>
                                        </View>)
                                })
                            }

                            <View
                                style={{
                                    height: 60,
                                    borderWidth: 1,
                                    borderColor: 'red',
                                    justifyContent: 'center',
                                    alignItems: 'center'
                                }}>
                                <Text
                                    style={{
                                        color: 'white',
                                        fontSize: 12
                                    }}> {jours[0]} </Text>
                            </View>

                        </Animated.View>
                    </View>
                    {/* </ScrollView> */}
                    <View>
                        <Text style={{ color: 'white' }}>Vita 11/17</Text>
                        <Text style={{ color: 'white' }}>11:31:02</Text>
                    </View>
                </View>

                <View style={itemStyles.container}>
                    <FlatList
                        data={[
                            { key: 'un' },
                            { key: 'deux' }
                        ]}
                        renderItem={ ({item}) => {
                            return <Text style={itemStyles.item}>{ item.key }</Text>
                        }}
                    />
                </View>

                <ScrollView style={{ width: width, ...styles.root }}>
                    {
                        this.state.data.length > 0
                            ? this.state.data.map((e, i) => {
                                return (
                                    <Animated.View key={i}>
                                        <Move delais={i * 100} xD={width} yD={0} key={e.numAnnonce}>
                                            <TouchableHighlight
                                                onPress={this.OnClickDetails.bind(this, e.numAnnonce)}
                                                underlayColor="#75a45c"
                                            >
                                                <Block datas={e}/>
                                            </TouchableHighlight>
                                        </Move>
                                    </Animated.View>
                                )
                            }) : null
                    }
                </ScrollView>
            </View>
        )
    }
}

const itemStyles = StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 22
    },
    item: {
        padding: 10,
        fontSize: 18,
        height: 44,
        color: 'white'
    }
})

const mapStateToProps = state => {
    return { other: state.Other }
}

const mapDispatchToProps = dispatch => {
    return {
        changeShowEdit: (data) => {
            dispatch({ type: 'CHANGE_SHOW_EDIT', data })
        }
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(Principals)
